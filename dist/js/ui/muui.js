// Generated by CoffeeScript 1.7.1
define(['muui/core/utils'], function(utils) {
  var MuUI;
  MuUI = (function() {
    MuUI.defaults = {
      el: '',
      datasource: '',
      render_fn: 'replaceWith',
      render_done: function(r) {},
      data_filter: function(r) {
        return r;
      }
    };

    MuUI.prototype.get_opts = function(options) {
      return $.extend({}, MuUI.defaults, options);
    };

    function MuUI(options) {
      var opts;
      this.opts = opts = this.get_opts(options);
      if (!opts.el) {
        throw 'el cannot be empty.';
      }
      this.$el = $(opts.el);
      this.before_render();
      this.render().done((function(_this) {
        return function() {
          _this.init_events();
          return _this.after_render();
        };
      })(this));
    }

    MuUI.prototype.get_datasource = function() {
      var datasource;
      datasource = this.opts.datasource;
      try {
        datasource = JSON.parse(datasource);
      } catch (_error) {
        datasource = this.opts.datasource;
      }
      return datasource;
    };

    MuUI.prototype.render = function() {
      var $el, datasource, def, opts, render_fn, tmpl;
      $el = this.$el, opts = this.opts;
      def = $.Deferred();
      tmpl = opts.tmpl;
      render_fn = opts.render_fn;
      datasource = this.get_datasource();
      if (tmpl) {
        require([tmpl], (function(_this) {
          return function(tmpl) {
            var render_tmpl;
            render_tmpl = function(r) {
              var $tmpl;
              $tmpl = $(tmpl(r));
              $el[render_fn]($tmpl);
              if (render_fn === 'replaceWith') {
                _this.$el = $tmpl;
              }
              def.resolve(r, $tmpl);
              return opts.render_done(r, $tmpl);
            };
            if (datasource) {
              return utils.api(datasource).done(function(r) {
                return render_tmpl(opts.data_filter(r));
              });
            } else {
              return render_tmpl();
            }
          };
        })(this));
      } else {
        def.resolve();
        opts.render_done();
      }
      return def.promise();
    };

    MuUI.prototype.before_render = function() {};

    MuUI.prototype.after_render = function() {};

    MuUI.prototype.init_events = function() {};

    return MuUI;

  })();
  return MuUI;
});
